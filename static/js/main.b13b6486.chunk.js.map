{"version":3,"sources":["components/BlackBar.js","components/content/projects/IndividualProjectDisplay.js","components/content/projects/ProjectCard.js","components/content/projects/projectInformation.js","components/content/projects/ProjectDisplays.js","components/content/Title.js","components/content/Content.js","App.js","serviceWorker.js","index.js"],"names":["BlackBar","props","react_default","a","createElement","className","IndividualProjectDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","projectName","_this$props","imageurl","refs","projectCover","style","backgroundImage","setState","ref","id","Component","ProjectCard","project","projectClicked","projectInfo","projectTitle","color","backgroundImageUrl","onClick","clickEvent","name","technologies","description","links","map","linkObj","ind","key","concat","rel","href","target","link","projectList","ProjectDisplays","currentProject","handleClick","bind","assertThisInitialized","evt","currentClickedState","forEach","_this$state","ProjectCard_ProjectCard","IndividualProjectDisplay_IndividualProjectDisplay","Title","title","_this2","newTitleArr","split","newTitle","delay","timer","letter","setTimeout","splice","length","join","i","Content","slice","projects","content_Title","ProjectDisplays_ProjectDisplays","App","BlackBar_BlackBar","content_Content","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b13b6486.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const BlackBar = (props) => {\r\n    return (\r\n        <div className=\"bar-black\">\r\n            hey.\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class IndividualProjectDisplay extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            projectName: \"\"\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        const {imageurl,projectName} = this.props\r\n        const project = this.refs.projectCover\r\n        project.style.backgroundImage = imageurl\r\n        this.setState({\r\n            projectName\r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div ref=\"projectCover\" id={this.state.projectName} className=\"projects-container-display\" />\r\n        )\r\n    }\r\n} ","import React, { Component } from \"react\";\r\n\r\nexport default class ProjectCard extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      project: {},\r\n      projectClicked: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { projectInfo } = this.props;\r\n    const project = this.refs.projectCover;\r\n    const projectTitle = this.refs.projectTitle;\r\n    //grab the elements that need smart styling by the ref\r\n    projectTitle.style.color = projectInfo.color;\r\n    project.style.backgroundImage = projectInfo.backgroundImageUrl;\r\n    //style em here ^\r\n    this.setState({\r\n      project: projectInfo\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { project } = this.state;\r\n    return (\r\n      <div ref=\"projectCover\" className=\"project-slide\">\r\n        {/* pass down the clickEvent from the ProjectDisplay div */}\r\n        <div onClick={this.props.clickEvent} className=\"project-slide-cover\">\r\n          <div ref=\"projectTitle\" className=\"project-slide-cover-title\">\r\n            {project.name}\r\n          </div>\r\n          <div className=\"project-slide-cover-tech\">{project.technologies}</div>\r\n          <div className=\"project-slide-cover-description\">\r\n            {project.description}\r\n          </div>\r\n          {\r\n            //   load links only if it's defined : null\r\n              project.links ? project.links.map((linkObj,ind) => {\r\n                  return (\r\n                    <a\r\n                    key={`${project.name}-link-${ind}`}\r\n                    // use these props to make link open on new tab\r\n                    rel=\"noopener noreferrer\"\r\n                    href={linkObj.href}\r\n                    target=\"_blank\"\r\n                    className=\"project-slide-cover-link\"\r\n                  >\r\n                    {linkObj.link}\r\n                  </a>\r\n                  )\r\n              }) : null\r\n          }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export const pngUrls = [\r\n  \"url('/cover-images/TabTracker.png')\",\r\n  \"url('/cover-images/TheoryScript.png')\",\r\n  \"url('/cover-images/Crossover.png')\",\r\n  \"url('/cover-images/DungeonMaster.png')\"\r\n];\r\n\r\nconst projectTemplate = {\r\n  name: \"\",\r\n  technologies: \"\",\r\n  description: \"\",\r\n  backgroundImageUrl: \"\",\r\n  color: \"\",\r\n  links: [\r\n    {\r\n      href: \"\",\r\n      link: \"\"\r\n    },\r\n  ]\r\n};\r\n\r\nexport const projectList = [\r\n  {\r\n    name: \"Tabtracker\",\r\n    technologies: \"Vue.js, Vuex, Vuetify Express, Sequelize, SQLite, Webpack\",\r\n    description:\r\n      \"Comprehensive fullstack website clone for keeping track of guitar tabs and songs, created using Vue and SQLite\",\r\n    backgroundImageUrl: \"url('/cover-images/TabTracker.png')\",\r\n    color: \"rgb(1,92,147)\",\r\n    links: [\r\n      {\r\n        href: \"https://github.com/mcabrex/tabtracker\",\r\n        link: \"github.com/mcabrex/tabtracker\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    name: \"TheoryScript\",\r\n    technologies: \"React.js, React, SCSS, Jest, Heroku\",\r\n    description:\r\n      \"Web application for the realization of functional music theory, created with create-react-app and deployed through Heroku\",\r\n    backgroundImageUrl: \"url('/cover-images/TheoryScript.png')\",\r\n    color: \"rgb(0,196,179)\",\r\n    links: [\r\n      {\r\n        href: \"https://theoryscript.herokuapp.com/\",\r\n        link: \"theoryscript.herokuapp.com \"\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    name: \"Crossover\",\r\n    technologies: \"React, Firebase, Cloudinary, Webpack, SCSS\",\r\n    description:\r\n      \"Collaborative comic generator for users to take turns creating an original comic, deployed and stored through Firebase\",\r\n    backgroundImageUrl: \"url('/cover-images/Crossover.png')\",\r\n    color: \"rgb(223,159,38)\",\r\n    links: [\r\n      {\r\n        href: \"https://github.com/mdnyc2017/capstoneCrossover\",\r\n        link: \"github.com/mdnyc2017/capstoneCrossover\"\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    name: \"Dungeon Master\",\r\n    technologies: \"Webpack, React, Redux, Express, PostgresSQL, dnd5eAPI\",\r\n    description:\r\n      \"A web application for DMs to use in maintaining Dungeons and Dragons campaign information. (IN PROGRESS)\",\r\n    backgroundImageUrl: \"url('/cover-images/DungeonMaster.png')\",\r\n    color: \"rgb(121,0,0)\",\r\n    links: [\r\n      {\r\n        href: \"https://dee-em.herokuapp.com/\",\r\n        link: \"dee-em.herokuapp.com\"\r\n      },\r\n      {\r\n        href: \"https://github.com/mcabrex/dem\",\r\n        link: \"github.com/mcabrex/dem\"\r\n      }\r\n    ]\r\n  }\r\n];\r\n","import React, { Component } from \"react\";\r\nimport IndividualProjectDisplay from \"./IndividualProjectDisplay\";\r\nimport ProjectCard from \"./ProjectCard\";\r\nimport {projectList} from \"./projectInformation\";\r\n\r\nexport default class ProjectDisplays extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      currentProject: {},\r\n      projectList: [],\r\n      projectClicked: false\r\n    };\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      projectList\r\n    });\r\n  }\r\n\r\n  handleClick(evt){\r\n    const projectName = evt.target.id\r\n    const currentClickedState = this.state.projectClicked\r\n    const {projectList} = this.state\r\n    let currentProject = {}\r\n    projectList.forEach(project =>{\r\n      if(project.name === projectName) currentProject = project\r\n    })\r\n    if(evt.target.className !== \"projects-container\"){\r\n      this.setState({\r\n        projectClicked: !currentClickedState,\r\n        currentProject\r\n      })\r\n    } \r\n  }\r\n\r\n  render() {\r\n    const { currentProject, projectClicked, projectList } = this.state;\r\n    return (\r\n      <div onClick={this.handleClick} className=\"projects-container\">\r\n        {\r\n          projectClicked ? \r\n          <ProjectCard \r\n            clickEvent={this.handleClick}\r\n            projectInfo={currentProject}\r\n          /> :\r\n          projectList.map(project => {\r\n          //destructure the backgroundImageUrl property on the project object, pass it down as a prop\r\n          let { backgroundImageUrl } = project;\r\n          return (\r\n            <IndividualProjectDisplay\r\n              key={project.name}\r\n              projectName={project.name}\r\n              imageurl={backgroundImageUrl}\r\n            />\r\n          );\r\n          })\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nclass Title extends Component {\r\n  state = {\r\n    title: \"{  }\",\r\n  };\r\n\r\n  componentDidMount() {\r\n    //the whole purpose of this is to create a title that appears letter by letter\r\n    let title = \"Mario Leo Cabardo\";\r\n    let newTitleArr = this.state.title.split(\"\");\r\n    let newTitle = \"\";\r\n    let delay = 200;\r\n    //an initial delay to be incremented during the loop\r\n    const timer = (letter) => setTimeout(() => {\r\n      newTitleArr.splice(newTitleArr.length - 2, 0, letter);\r\n      newTitle = newTitleArr.join(\"\");\r\n      //take the array of the title and insert the current letter into it, then join it and set the state\r\n      this.setState({\r\n        title: newTitle\r\n      });\r\n    }, delay);\r\n    for (let i = 0; i < title.length; i++) {\r\n      let letter = title[i];\r\n      timer(letter)\r\n      delay += 150;\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {title} = this.state\r\n    return (\r\n      <h1 className=\"title-title\">\r\n        {title}\r\n      </h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;\r\n","import React, { Component } from \"react\";\r\nimport { ProjectDisplays } from \"./projects\";\r\n\r\nimport Title from \"./Title\";\r\n\r\nclass Content extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      description: \"\"\r\n    };\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //set the projects obj to state\r\n    this.setState({\r\n      description: \"developer. engineer. another buzzword.\"\r\n    });\r\n  }\r\n\r\n  handleClick(evt) {\r\n    //grabbing the project name through the background image url on click\r\n    const { backgroundImage } = evt.target.style;\r\n    //backgroundImage gonna be a url, just slicing it to grab the project name\r\n    const project = backgroundImage.slice(19, backgroundImage.length - 6);\r\n    const { projects } = this.state;\r\n    this.setState({\r\n      projectClicked: true,\r\n      //set currentProject to the grabbed project name from the state projects obj\r\n      currentProject: projects[project]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { description } = this.state;\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"title\">\r\n          <Title />\r\n          <h2 className=\"title-description\">{description}</h2>\r\n        </div>\r\n        <div className=\"carousel\">\r\n          {/* carousel slides will go here */}\r\n          <ProjectDisplays />\r\n        </div>\r\n        <div>\r\n          Some Links ->\r\n          <a\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/mcabrex\"\r\n            target=\"_blank\"\r\n            className=\"title-links\"\r\n          >\r\n            github.com/mcabrex\r\n          </a>\r\n          <a\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://www.linkedin.com/in/mcabardo/\"\r\n            target=\"_blank\"\r\n            className=\"title-links\"\r\n          >\r\n            linkedin.com/in/mcabardo \r\n          </a>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React, { Component } from \"react\";\nimport { BlackBar, Content } from \"./components\";\nimport \"./styles/index.scss\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BlackBar />\n        <Content />\n        <BlackBar />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}